#pragma once

#include "../Common/Assert.h"

#include <string>
#include <time.h>

namespace std {
#if defined(_UNICODE)
	using tstring = std::wstring;
#else
	using tstring = std::string;
#endif
}

class CString : protected std::tstring {
public:
	static size_t MaxFormatLength;

	CString() {}
	CString(LPCTSTR str) : std::tstring(str) {}

	LPCTSTR GetString() const { return c_str(); }
	CString& operator=(const CString& that);
	CString operator+(const CString& that) const;

	void Format(LPCTSTR, ...);
	void FormatV(LPCTSTR, va_list);
};

class CTime {
public:
	CTime() : m_time(0) {}
	CTime(const CTime& src) : m_time(src.m_time) {}
	CString Format(LPCTSTR);
	static CTime CurrentTime();

protected:
	time_t m_time;
};

//
// Template class that hold a value and it's name and description(optional).
//
template<typename T>
struct ValueName {
	T value;
	LPCTSTR name;
	LPVOID param;		// User defined value.

	static LPCTSTR StringFormat;

	CString toString() const;
	CString valueToString() const;
};

// Macro for declaring ValueName table that passed to ValueToString() function.
// Optiional parameter can be specified to assign description string.
#define VALUE_NAME_ITEM(x, ...) {x, _T(#x), __VA_ARGS__}

// Default format for scalar type value used to convert to string.
template<typename T> LPCTSTR ValueName<T>::StringFormat = _T("%d");

// Searches a value in the list and reference to found ValueName object.
// If a value is not in the list, returns ValueName object whose name is "Unknown".
template<typename T, size_t size>
const ValueName<T>& FindValueName(const ValueName<T>(&list)[size], const T& v)
{
	for(auto& i : list) {
		if(i.value == v) {
			return i;
		}
	}

	static ValueName<T> unknown = {T(), _T("Unknown")};
	unknown.value = v;
	return unknown;
}

// Searches a value in the list and returns string generated by toString() method of found ValueName object.
template<typename T, size_t size>
CString ValueToString(const ValueName<T>(&list)[size], const T& v)
{
	return FindValueName(list, v).toString();
}

// Returns string `name(value):description`.
template<typename T>
CString ValueName<T>::toString() const
{
	CString ret;
	ret.Format(_T("%s(%s)"), (name ? name : _T("No name")), valueToString().GetString());
	return ret;
}

// Returns a string that represents the value.
// ValueName<>::StringFormat is used to format a string.
template<typename T>
CString ValueName<T>::valueToString() const
{
	CString ret;
	ret.Format(StringFormat, value);
	return ret;
}

// Returns a string that represents the GUID value.
template<>
CString ValueName<GUID>::valueToString() const;
