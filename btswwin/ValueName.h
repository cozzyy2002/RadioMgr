#pragma once

#include "../Common/Assert.h"

extern CString guidToString(REFGUID);

//
// Template class that hold a value and it's name and description(optional).
//
template<typename T>
struct ValueName {
	T value;
	LPCTSTR name;
	LPCTSTR description;

	static LPCTSTR StringFormat;

	CString toString() const;
	CString valueToString() const;
};

// Macro for declaring ValueName table that passed to ValueToString() function.
// Optiional parameter can be specified to assign description string.
#define VALUE_NAME_ITEM(x, ...) {x, _T(#x), __VA_ARGS__}

// Default format for scalar type value used to convert to string.
template<typename T> LPCTSTR ValueName<T>::StringFormat = _T("%d");

// Searches a value in the list and returns string generated by toString() method of found ValueName object.
template<typename T, size_t size>
CString ValueToString(const ValueName<T>(&list)[size], const T& v)
{
	ValueName<T> unknown;
	const ValueName<T>* found = &unknown;
	for(auto& i : list) {
		if(i.value == v) {
			found = &i;
			break;
		}
	}
	if(found == &unknown) {
		unknown = {v, _T("UNKNOWN"), nullptr};
	}
	return found->toString();
}

// Returns string `name(value):description`.
template<typename T>
CString ValueName<T>::toString() const
{
	CString desc;
	if(description) { desc.Format(_T(":%s"), description); }
	CString ret;
	ret.Format(_T("%s(%s)%s"), (name ? name : _T("No name")), valueToString().GetString(), desc.GetString());
	return ret;
}

// Returns a string that represents the value.
// ValueName<>::StringFormat is used to format a string.
template<typename T>
CString ValueName<T>::valueToString() const
{
	CString ret;
	ret.Format(StringFormat, value);
	return ret;
}

// Returns a string that represents the GUID value.
template<>
CString ValueName<GUID>::valueToString() const
{
	return guidToString(value);
}
